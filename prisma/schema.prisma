// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String  @id @default(uuid())
  name                    String?
  email                   String? @unique
  emailVerified           DateTime?
  image                   String?
  is_complete_information Boolean @default(false)
  accounts                Account[]
  sessions                Session[]
  firstname               String?
  lastname                String?
  gender                  String?
  birthdate               DateTime?
  phone                   String? @unique
  address                 String?
  registration_date       DateTime @default(now())
  last_active_date        DateTime?
  is_active               Boolean @default(true)
  role                    Role    @default(customer)
  ltv                     Float   @default(0.0)
  Transactions            Transactions[]
  Favorites               Favorites[]
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transactions {
  transaction_id         String   @id @default(uuid())
  userId                String
  product_id            String
  start_date            DateTime
  end_date              DateTime
  time                  DateTime
  number_of_participants Int
  note                  String?
  pickup_dropoff        String?
  receipt_link          String?
  total_Amount          Float
  payment_status        PaymentStatus
  transaction_status    TransactionStatus

  User     User    @relation(fields: [userId], references: [id])
  Product  Product @relation(fields: [product_id], references: [product_id])

  @@index([userId])
  @@index([product_id])
}

model Product {
  product_id   String   @id @default(uuid())
  product_type ProductType

  Transactions Transactions[]
  Packages     Packages?
  Activities   Activities?
  Events       Events?
  Hotels       Hotels?
  Transportation Transportation?
  Favorites    Favorites[]
}

model Packages {
  package_id          String  @id @default(uuid())
  product_id          String  @unique
  package_name        String
  highlights          String
  what_to_expect      String
  best_time_to_visit  String
  duration_number     Int
  duration_unit       DurationUnit
  faqs                String
  package_price       Float
  number_of_sold_items Int @default(0)
  favorites           Int @default(0)
  rating              Float @default(0.0)
  is_active           Boolean @default(true)

  Product Product @relation(fields: [product_id], references: [product_id])
}

model Activities {
  activity_id         String  @id @default(uuid())
  product_id          String  @unique
  activity_name       String
  highlights          String
  what_to_expect      String
  best_time_to_visit  String
  duration_number     Int
  duration_unit       DurationUnit
  faqs                String
  activity_price      Float
  number_of_sold_items Int @default(0)
  favorites           Int @default(0)
  rating              Float @default(0.0)
  is_active           Boolean @default(true)

  Product Product @relation(fields: [product_id], references: [product_id])
}

model Events {
  event_id            String  @id @default(uuid())
  product_id          String  @unique
  event_name          String
  highlights          String
  location            String
  what_to_expect      String
  best_time_to_visit  String
  duration_number     Int
  duration_unit       DurationUnit
  faqs                String
  event_price         Float
  number_of_sold_items Int @default(0)
  favorites           Int @default(0)
  rating              Float @default(0.0)
  is_active           Boolean @default(true)

  Product Product @relation(fields: [product_id], references: [product_id])
}

model Hotels {
  hotel_id            String  @id @default(uuid())
  product_id          String  @unique
  hotel_name          String
  room_type           String
  what_to_expect      String
  amenities           String
  highlights          String
  faqs                String
  hotel_price         Float
  duration_number     Int
  duration_unit       DurationUnit
  number_of_sold_items Int @default(0)
  favorites           Int @default(0)
  rating              Float @default(0.0)
  is_active           Boolean @default(true)

  Product Product @relation(fields: [product_id], references: [product_id])
}

model Transportation {
  transportation_id   String  @id @default(uuid())
  product_id          String  @unique
  transportation_name String
  vehicle_type        String
  vehicle_info        String
  capacity            Int
  vehicle_price       Float
  number_of_sold_items Int @default(0)
  favorites           Int @default(0)
  rating              Float @default(0.0)
  is_active           Boolean @default(true)

  Product Product @relation(fields: [product_id], references: [product_id])
}

model Favorites {
  id       String @id @default(uuid())
  userId   String
  itemId   String
  itemType ProductType

  User     User     @relation(fields: [userId], references: [id])
  Product  Product  @relation(fields: [itemId], references: [product_id], onDelete: Cascade)
}

enum Role {
  customer
  admin
}

enum PaymentStatus {
  paid
  pending
  failed
}

enum TransactionStatus {
  completed
  failed
  pending
}

enum DurationUnit {
  H // Hours
  D // Days
}

enum ProductType {
  Hotels
  Packages
  Events
  Activities
  Transportation
}